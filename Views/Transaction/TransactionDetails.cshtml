@model CreateTransactionRequestModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "";
}


<div class="row">
    <div class="col-md-2">
        <div>@await Html.PartialAsync("~/Views/User/Menu.cshtml")</div>
    </div>
    <div class="col-md-10">
        <div class="text-center">
    <h1>@ViewData["Title"]</h1>
    </div>
        <form asp-action="TransactionDetails">

            <div id="productDetails">
                <div class="productRow">
                    <label name="ProduceId">Product:</label>
                    <input type="text" id="product1" name="productId">

                    <label name="Quantity">Quantity:</label>
                    <input type="number" id="quantity1" name="Quantity">

                    <button type="button" class="removeButton">Remove</button>
                </div>
            </div>

            <button type="button" id="addProductButton">Add Product</button>

            <button type="submit">Submit</button>
        </form>

    </div>

</div>




@* 
@section Scripts{
    <script>
        // Get the add product button and product details div
        var addProductButton = document.getElementById("addProductButton");
        var productDetailsDiv = document.getElementById("productDetails");

        // Add a click event listener to the add product button
        addProductButton.addEventListener("click", function () {
            // Create a new product row and add it to the product details div
            var newRow = createProductRow();
            productDetailsDiv.appendChild(newRow);
        });

        // Add a click event listener to the product details div
        productDetailsDiv.addEventListener("click", function (event) {
            // Check if the clicked element is a remove button
            if (event.target && event.target.classList.contains("removeButton")) {
                // Remove the product row
                var row = event.target.parentNode;
                row.parentNode.removeChild(row);
            }
        });

        // Function to create a new product row
        function createProductRow() {
            // Get the number of existing product rows
            var rowCount = productDetailsDiv.childElementCount;

            // Create a new row element with input fields and a remove button
            var row = document.createElement("div");
            row.classList.add("productRow");

            var productLabel = document.createElement("label");
            productLabel.setAttribute("name", "ProduceId" + rowCount);
            productLabel.textContent = "Produce " + rowCount + ":";

            var productInput = document.createElement("input");
            productInput.setAttribute("type", "text");
            productInput.setAttribute("id", "product" + rowCount);
            productInput.setAttribute("name", "product" + rowCount);

            var quantityLabel = document.createElement("label");
            quantityLabel.setAttribute("for", "quantity" + rowCount);
            quantityLabel.textContent = "Quantity:";

            var quantityInput = document.createElement("input");
            quantityInput.setAttribute("type", "number");
            quantityInput.setAttribute("id", "quantity");
        }
    </script>
} *@








